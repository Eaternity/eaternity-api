FORMAT: 1A
HOST: https://co2.eaternity.ch/api

# Eaternity Database (EDB) API
The Eaternity Database API is a Web Service that calculates the Climate Score (CO₂eq), the Vita Score and other environmental footprints of recipes, restaurants and ingredients dynamically. It includes daily changing information on origin,
seasonality and other factors in the calculation ([more Informations on the indicators](http://www.eaternity.org/foodprint/)). Data provided to Eaternity via this API allows for in-depth analyses and reports ([more Informations on the reports](http://www.eaternity.org/app/report)).

### Terms & Conditions
By accessing the APIs, you accept the Eaternity's [Terms & Conditions](http://www.eaternity.org/legal). If You are using the APIs on behalf of an entity, you represent and warrant that you have authority to bind that entity to the Terms & Conditions and by accepting the Terms, you are doing so on behalf of that entity.

### Authentication
To access the API, use **Basic Authentication** with your API key as the username and an empty password.

+ Example

    ```bash
    curl -u YOUR_API_KEY: \
      -H "Content-Type: application/json" \
      -X GET https://co2.eaternity.ch/api/kitchens
    ```

Join us on Slack [here](https://eaternity-edb-api-slack-invite.herokuapp.com) to get in touch with our developers.


# Group Kitchen Resources
A kitchen is any place where food is prepared and or sold. It can be a restaurant, a factory, a canteen or anything similar. The kitchen resource contains all information about the kitchen, including the name, location. Kitchens are the basis basic grouping for recipes and supplies. Reports and statistics are provided on this level.

## Kitchen Properties
| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|:----------|
|name |string |official name of the kitchen or factory |yes|
|location |string |place where the kitchen is located. Address or country (arbitrary format) |yes|
|email|string |email address of the kitchen where the reports are sent to |no|
|language|string | language of the reports for the kitchen |no|
|id|string|the id of the kitchen. Either generated by Eaternity or supplied by the client through a PUT|no|


+ Request (application/json)

        {   "kitchen": {
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/198764

    + Body

            {   "kitchen": {
                    "id": "198764",
                    "name": "police canteen",
                    "location": "zurich, switzerland",
                    "email": "test@example.com",
                    "language": "en"
                }
            }

### Get all kitchens of this client [GET]
A list of kitchen ids of this client (one API Key) is returned.

+ Response 200 (application/json)

        {
            "kitchens": [ "45674","42344","42233","48855" ]
        }

## Kitchen [/kitchens/{kitchen_id}]

+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.

### Get a kitchen [GET]
Get the whole kitchen resource.

+ Response 200 (application/json)

        {   "kitchen": {
                "id": "198764",
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

### Create or update a kitchen [PUT]
Update or create the kitchen with the specific id

+ Request (application/json)

        {   "kitchen": {
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

+ Response 200 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/198764

    + Body

            {   "kitchen": {
                    "id": "198764",
                    "name": "police canteen",
                    "location": "zurich, switzerland",
                    "email": "test@example.com",
                    "language": "en"
                }
            }

+ Response 201 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/198764

    + Body

            {   "kitchen": {
                    "id": "198764",
                    "name": "police canteen",
                    "location": "zurich, switzerland",
                    "email": "test@example.com",
                    "language": "en"
                }
            }


### Delete a kitchen [DELETE]
Deletes this kitchen from the server

+ Response 204



# Group Recipe Resources

A recipe is a collection of ingredients, instructions and other information that describes how a food item sold in a restaurant is composed. It is the basis for the calculation of the CO₂-value and other indicators. The recipe resource contains all information about the recipe, including the ingredients, instructions, and other metadata.

### Uniqueness of Recipes
Note that for every time, a recipe is offered in a kitchen, a new id has to be used.

_Example 1:_

Your business runs Kitchen A and Kitchen B. On the 1st of April, both kitchens offer pumpkin risotto, using the same ingredients. You will have to create *two* different recipes with *two* different ids.


_Example 2_:

Your business runs Kitchen A and Kitchen B. On the 1st of April, both kitchens offer pumpkin risotto. On the 2nd of April, Kitchen A offers pumpkin risotto again. You will have to create *three* different recipes with *three* different ids.

### Sub-Recipes
In the examples above, all individual recipes may contain the identical sub-recipe pumpkin risotto as an ingredient, having the same id each time.
The sub-recipe pumpkin risotto will be stored only once in the database.
The drawback of reusing the id is that you will not be able to change the composition idividually without impacting all usages of the sub-recipe. So consider using individual ids for sub-recipes as well.

Make sure to that you are using the flag `transient=true` for the sub-recipes in any case. The sub-recipe on its own will then not be included in the monthly summary.


### URL Parameters


| Parameters | Type  | Description      |
|:----------|:--------|:------------------|
|transient|boolean|Recipes with this flag set to `true` will be excluded from reports and statistics. Make sure to use this flag properly to keep reports meaningful.|
|full-resource|boolean|Specifies whether our JSON answer will contain all fields (except the additional indicators) or a short answer. Default: false. Works recipes and supplies. This helps to save bandwidth for slow connections.|
|indicators|boolean|Specifies wether the JSON answer will contain the additional indicator fields. Default: false. Works for recipes, ingredients, and supplies. This helps to save bandwidth for slow connections and the response is generally faster.|


## Batch Operations on Recipe Resources [/recipes/batch]

Batch operations allow you to create, update or delete multiple recipes at once. They are the most efficient way to work with the Eaternity API. The batch operations can check consistency in between recipes that depend on each other. For example, if you have a recipe with a sub-recipe, the batch operation will check if the sub-recipe is already in the database and will return an error if it is not. This is not possible with single requests.
 Batch operations are limited by the computational resources required for the calculations. We recommend a maximum of 100 recipes per request but the limit is not fixed. The server will return an error if the request is too large. The batch operations are not atomic, meaning that if one recipe fails, the others may still be processed. The response will contain the status of each recipe in the batch.

The `full-resource` url parameter is supported. The transient parameter can be set selectively per recipe inside the batch.

The message in the response provides more details about the failure of individual recipes.

### Create or update a batch of recipes [POST]
Create or update a batch of recipes at once. If a recipe id is provided, the recipe is either created with this id or the existing recipe is overwritten. The status code tells the difference.

The `kitchen-id` may be used to store the recipe into a specific kitchen.

The additional integer `request-id` field enables you to track back the recipes you sent in case you don't want to use your own id's. Either a request id or a recipe id is required.
The request-id differs from the recipe id and has just the lifetime of a single request (not stored on Eaternity's end).

+ Request (application/json)

        [
        {
        {
        {
        {
        	"request-id": 1,
        	"transient": false,
        	"recipe": {
        		"id": "0002076208", // your unique ID!
        		"menu-line-id": 19092,
        		"menu-line-name": "Hit Menu Lunch",
                "recipe-portions": 1, // as your recipe is defined
                "sold-portions": 202,
        		"production-portions": 212,
        		"date": "2023-10-14",
            	"kitchen-id": "AC432", // your unique ID!
            	"ingredients": [
        		{
                    	"id": "467", // your unique ID!
                    	"names": [
                        	{
                            	"language": "DE",
                            	"value": "Quality Pfeffer weiss gemahlen 900g"
                        	}
                    	],
                    	"amount": "0.0233",
                    	"unit": "gram", // "EA" is not possible
                    	"origin": "", // please specify as available
                    	"transport": "", // set to "ground" for parameter no airplane
                    	"production": "",
                    	"processing": "",
                    	"conservation": "",
                        "gtin": "00012345678905" // please specify as available
                	},
        	        {
                    	"id": "0002076209",
                    	"amount": "0.0233",
                    	"unit": "gram",
        },
        {
        {
        },
        {
            "request-id": 2,
            "request-id": 2,
            "request-id": 2,
            "transient": true,
            "transient": true,
            "recipe": {
            "recipe": {
            "transient": true,
            "recipe": {
            "request-id": 2,
            "transient": true,
        "request-id": 2,
            "transient": true,
            "recipe": {
            "recipe": {
        		"id": "0002076209",
        	    "recipe-portions": 1,
        		"date": "2023-10-14",
            	"kitchen-id": "recipe-components", // a separate kitchen to collect recipes that were not part of the menu plan
            	"ingredients": [
        		{
                    	"id": "467",
                    	"names": [
                        	{
                            	"language": "DE",
                            	"value": "Quality Pfeffer weiss gemahlen 900g"
                        	}
                    	],
                    	"amount": "0.0233",
        },
        },
        {
            "request-id": 3,
            "transient": false,
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "kitchen-id": "112233",
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }
                ],
                ],
                "servings": 10,
                "ingredients": [
                "ingredients": [
                    }
                ],
                ],
                "servings": 10,
                "ingredients": [
                "ingredients": [
                    {
                      "id": "3948756",
                      "names": [
                ]
                ]
          }
        }
        ]

+ Response 200 (application/json)

        [
        {
            "statuscode": 200,
            "message": "",
            "request-id": 1,
            "recipe": {
            "recipe": {
                "co2-value": 765,
                "co2-value": 765,
                "eaternity-award": false,
                "rating": "B"
            }
        },
        {
            "statuscode": 200,
            "message": "",
            "request-id": 2,
            "recipe": {
            "recipe": {
                "kitchen-id": "198764",
                "co2-value": 765,
                "eaternity-award": false,
                "rating": "B"
            }
        },
        {
            "statuscode": 601,
            "message": "The ingredient 384767656 is not yet matched. Retry next day.",
            "request-id": 3
        }
        ]


### Delete a batch of recipes [DELETE]

+ Request (application/json)

        {
            "recipes": [ "3948756","3948757","3948757" ]
        }

+ Response 200 (application/json)

        [
        {
            "statuscode": 200,
            "message": "",
            "recipe-id": "3948756"
        },
        {
            "statuscode": 200,
            "message": "",
            "recipe-id": "3948757"
        },
        {
            "statuscode": 500,
            "message":  "Concurrency problem: You requested deleting this recipe several times in this batch.",
            "recipe-id": "3948757"
        }
        ]


## Recipes [/recipes]


### Create a recipe [POST]




Create a recipe resource and receive the CO₂-Value and Eaternity Award. Example of a full request with all fields used:

+ Request (application/json)

        {
        {
        {
            "kitchen-id": "198764",
            "titles": [
                {
                    "language": "de",
                    "value": "Kürbisrisotto"
                }
            ],
            "author": "Jamie Oliver",
            "date": "2013-10-30",
            "location": "Universitätstrasse 65\n8006 Zürich",
                        {
                        {
                            "language": "de",
                            "language": "de",
                            "language": "de",
                    "unit": "gram",
                    "unit": "gram",
                        {
                    "unit": "gram",
                    "production": "organic",
                    "transport": "ground",
                    "production": "organic",
                    ],
                    "unit": "gram",
                    "unit": "gram",
                    "transport": "ground",
                    "production": "organic",
                    "production": "organic",
                    "processing": "cut",
                    "conservation": "fresh"
                },
                    "unit": "gram",
                    "unit": "gram",
                    "unit": "gram",
                    "unit": "gram",
                    "unit": "gram",
                    "transport": "ground",
                    "transport": "ground",
                    "processing": "raw",
                    "unit": "gram",
                    "unit": "gram",
                    "origin": "Italien",
                    "transport": "ground",
                    "processing": "raw",
                    "processing": "raw",
                    "conservation": "dried"
                },
                {
                    "id": "987654321",
        }
        }









                "recipe": {
            {
            {
                "recipe": {
                "recipe": {
                    "info-text": "Two ingredient origins have been estimated.",
            "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "co2-value": 765,
                    "co2-value": 765,
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "info-text": "Two ingredient origins have been estimated.",
                    "info-text": "Two ingredient origins have been estimated.",
            "eaternity-award": false,
            "rating": "B",
            "info-text": "Origin of ingredient Kürbis (id: 3948756) was estimated to 'Spanien'",
            "ingredients": [
                {
                    "id": "3948756",
                    "co2-value": 300,
                    "rating": "A",
                    "bar-chart": 39.22
                },
                {
                    "id": "98325",
                    "co2-value": 465,
                    "rating": "C",
                    "bar-chart": 60.78
                },
                {





+ Parameters





+ Response 200 (application/json)


            {
            {
                "statuscode": 200,
                "message": "",
                "request-id": 0,
                "recipe-id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "kitchen-id": "45674",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B",
                    "indicators": {
                        "vita-score": {
                            "vita-score-points": 346,
                            "vita-score-rating": "B",
                            "energy-kcals": 457,
                            "nutrition-label": true
                        },
                        "environment": {
                            "animal-treatment-label": true,
                            "animal-treatment-rating": "A",
                            "rainforest-label": false,
                            "rainforest-rating": "E",
                            "scarce-water-liters": 6,
                            "water-footprint-rating": "C",
                            "water-footprint-award": true
                        },
                    }
                    }
                }



### Get all recipes contained in this kitchen [GET]

+ Response 200 (application/json)


        {
            "recipes": [ "298374","298345","298454","298345","298456","294564" ]



+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.
    + kitchen_id (string, required) - the id of the kitchen.


### Get Recipe [GET]
                "statuscode": 200,
                "message": "",
                "request-id": 0,
                "recipe-id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "kitchen-id": "45674",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B",
                    "indicators": {
                        "vita-score": {
                            "vita-score-points": 346,
                            "vita-score-rating": "B",
                            "energy-kcals": 457,
                            "nutrition-label": true
                        },
                        "environment": {
                            "animal-treatment-label": true,
                            "animal-treatment-rating": "A",
                            "rainforest-label": false,
                            "rainforest-rating": "E",
                            "scarce-water-liters": 6,
                            "water-footprint-rating": "C",
                            "water-footprint-award": true
                        },
                        "foodUnit": 41.0
                    }
                }
            }


### Get all recipes contained in this kitchen [GET]
A list of recipe ids is returned.

+ Response 200 (application/json)

        {
            "recipes": [ "298374","298345","298454","298345","298456","294564" ]
        }

## Kitchen Recipe [/kitchens/{kitchen_id}/recipes/{recipe_id}]

+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.
    + recipe_id (string, required) - the id of the recipe.

### Get Recipe [GET]
Get the up-to-date CO₂-Value for this recipe for the current date

+ Response 200 (application/json)

        {
        {
        {
            "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
            "kitchen-id": "198764",
            "co2-value": 765,
            "eaternity-award": false,
            "rating": "B",
            "info-text": "Origin of ingredient Kürbis (id: 3948756) was estimated to 'Spanien'",
            "ingredients": [
                {
                    "id": "3948756",
                    "co2-value": 300,
                    "rating": "A",
                    "bar-chart": 39.22
                },
                {
                    "id": "98325",
                    "co2-value": 465,
                    "rating": "C",
                    "bar-chart": 60.78
                },
                {
                    "id": "987654321",
                    "type": "recipes",
                    "co2-value": 200,
                    "rating": "A",
                    "bar-chart": 26.14
                }
            ],
            "indicators": {
                "vita-score": {
                    "vita-score-points": 346,
                    "vita-score-rating": "B",
                    "vita-score-improvement-percentage": -2.93,
                    "energy-kcals": 457,
                    "nutrition-label": true,
                    "nutrition-rating": "A",
                    "fruit-risk-factor-amount-gram": 0.00,
                    "fruit-risk-factor-points": 124.19,
                    "vegetable-risk-factor-amount-gram": 0.00,
                    "vegetable-risk-factor-points": 88.25,
                    "wholegrain-risk-factor-amount-gram": 0.00,
                    "wholegrain-risk-factor-points": 122.34,
                    "nuts-seeds-risk-factor-amount-gram": 0.00,
                    "nuts-seeds-risk-factor-points": 65.63,
                    "milk-risk-factor-amount-gram": 0.00,
                    "milk-risk-factor-points": 7.91,
                    "processed-meat-risk-factor-amount-gram": 0.00,
                    "processed-meat-risk-factor-points": 0.00,
                    "red-meat-risk-factor-amount-gram": 0.00,
                    "red-meat-risk-factor-points": 0.00,
                    "salt-risk-factor-amount-gram": 1.73,
                    "salt-risk-factor-points": 4.29
                },
                "environment": {
                    "animal-treatment-label": true,
                    "animal-treatment-rating": "A",
                    "rainforest-label": false,
            }
            }
        }


### Create or update a single recipe [PUT]
Update or create a certain recipe with this id. The whole recipe with all ingredients must be provided again. (PUT overrides the existing resource).

+ Request (application/json)

        {
        {
Update or create a certain recipe with this id. The whole recipe with all ingredients must be provided again. (PUT overrides the existing resource).

+ Request (application/json)

        {
        {
            "kitchen-id": "198764",
            "titles": [
                {
                    "language": "de",
                    "value": "Kürbisrisotto"
                }
            ],
                        {
                            "language": "de",
                        {
                            "language": "de",
            "ingredients": [
                {
                        {
                        {
                            "language": "de",
                            "language": "de",
                            "value": "Kürbis"
                        }
                    "unit": "gram",
                    "unit": "gram",
                    "unit": "gram",
                    "origin": "Spanien",
                        {
                        {
                            "language": "de",
                            "language": "de",
                },
                    "unit": "gram",
                    "unit": "gram",
                        {
                    "unit": "gram",
                    "transport": "ground",
                    "transport": "ground",
                        }
                    ],
                    "unit": "gram",






### Delete recipe [DELETE]
Deletes this recipe  from the server

+ Response 204


## Group Recipe Properties

### Recipe Properties In Requests

| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|----------|
|kitchen-id|string|the id of the kitchen the recipe belongs to.|yes|
|id|string|the id of the recipe. Either generated by Eaternity or supplied by the client|no|
|titles| list of language object| title of the recipe in different languages (array of language objects)|no|
|author|string|original author of the recipe|no|
|date|yyyy-mm-dd|the date the recipe is served. If **no date** is provided, **only a rating** of the recipe is returned.|best practice|
|location|string|location where the recipe is cooked. Address or country (arbitrary format) |no; kitchen location will be used|
|servings (deprecated)|int|for how many servings the ingredients are given. |no; use 'recipe-portions'|
|recipe-portions|int|for how many portions the ingredients are specified.  Replaces 'servings'. |no; fallback is 1|
|production-portions|int|how many portions of the recipe are planned to be produced.|   no|
|sold-portions|int|how many portions of the recipe were really sold (i.e. consumed). This is used by the prognosis endpoint to predict the sales.|no|
|instructions|list of language objects|cooking instructions for the recipe in different languages (array of language objects)|   no|
|ingredients|list of ingredients|a list of all ingredient resources in this recipe |yes|
|menu-line-name|string|A descriptor for the menu line ("Menu 1", "Garden Menu", "Vegan Menu")|no|
|menu-line-id|long|A number to identify the menu line|no|

### Recipe Properties In Responses only
| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|----------|
|co2-value|int|the CO₂-Value of the whole recipe per serving in [g CO₂e / serving]||
|co2-value-improvement-percentage|float|Comparison of this recipes's co2 footprint per food unit to the average||
|co2-value-reduction-value|float|The amount of gramm CO₂ saved by serving this recipe instead of serving the amount of an average product that provides the same nutritional value (g)||
|info-text| string | notes on the calculated recipe CO₂-value, e.g. remarks when properties like origin or transport are estimated||
|eaternity-award|boolean|true if the CO₂-Value of the recipe is climate friendly, false otherwise | |
|rating|string|the CO₂-recipe rating [A,B,C,D,E]. A is best, E is worst.| .|
|indicators|dictionary|the vita and nutritional indicators described above|.|


# Group Ingredient Properties

Each request for Recipes or Supplies contains a list of Ingredients. Each Ingredient requires at least an `id`, `name` and an `amount` but may contain additional specifications.
Ingredients with the same id are shared between all of your Recipes as well as Supplies.
There is no hard limit on the number of ingredients, but requests may time out and fail in the range of more than 25 ingredients, especially in combination with batch requests.

### Ingredient Properties In Requests
| Property | Type  | Description    | Required |
|:----------|:--------|:------------------|:----------|
|id|string| your unique id of the ingredient|yes|
|type|string|either *conceptual-ingredients* or *recipes*. *conceptual-ingredients* specifies a normal ingredient, *recipes* references to an already existing recipe. Default: *conceptual-ingredients*|no|
|names|list of language object|full name of ingredient in different languages (array of language objects). Name in at least one language required.|yes|
|amount|float|amount of the ingredient in the specified unit|yes|
|unit|string|unit of the given amount of the ingredient: *gram* or *liter*, default: *gram*|no|
|origin|string|origin of the ingredient: postal address or country |best practice|
|transport|string|means of transport from ”origin” to ”location” of recipe or kitchen. Values: *air* or *ground*|best practice|
|production|string|production of the base material. Values: *standard*, *greenhouse*, *organic*, *fair-trade*, *farm* (fishes and game animals only), *wild-caught* (fishes and game animals only), *sustainable-fish*. |best practice|
|producer|string|the producer or brand of the product. Especially important for combined products (products with multiple ingredients)|best practice|
|processing| string| processing and convenience. Values: *raw*. Meat and Fisch: *unboned* or *boned*. Fisch: *skinned*, *beheaded*, *fillet*. Vegetables and Fruits: *cut*, *boiled*, *peeled*. |no|
|conservation| string| conservation for longer storage life. Values: *fresh* or *frozen* or *dried* or *conserved* or *canned* or *boiled-down* |best practice|
|packaging| string| how the product is packaged. Values:  *none*, *plastic*, *paper*, *pet*, *tin*, *alu*, *glas*, *cardboard*, *tetra* |no|
|ingredients-declaration|string|List of ingredients as declared for packaged foods. E.g.: "Hähnchenbrustfilet (53 %), Panade (28%) (Weizenmehl, Wasser, modifizierte Weizen-stärke, Weizenstärke, Speisesalz, Gewürze, Hefe), Wasser, Putenformfleisch-schinken aus Putenfleischteilen zusammengefügt (7 %) (Putenkeulenfleisch, Nitritpökelsalz (Kochsalz, Konservierungsstoff: E 250), Maltodextrin, Dextrose, Gewürzextrakte, Stabilisator: E450), Käse (7 %), Kartoffelstärke, Stabilisator: modifizierte Stärke, Salz), Speisesalz, Stärke, Maltodextrin, Milcheiweiß, Pflanzeneiweiß, Dextrose, Zucker, Gewürzextrakte, Geschmacksverstärker: E 620"|no|
|nutrient-values|list of nutrient values |Structured list of the nutrients values per defined nutrient as defined below.|no|
|gtin|string|global trade item number: [www.gtin.info](http://www.gtin.info/)|no|

### Ingredient Properties In Responses only
To receive informations on the ingredients, the URL parameter `full-resource` must be set to `true`. This works for all recipe endpoints like `/recipes/{id}` and `/recipes/batch`.

| Property | Type  | Description    | Required |
|:----------|:--------|:------------------|:----------|
|rating|string|the CO₂-ingredient rating [A,B,C,D,E]. A is best, E is worst.||
|bar-chart|float|to generate a bar chart for all ingredients of a recipe. How much this ingredient contributes to the total CO₂-value of the recipe in percent (0.00% - 100.00%)||
|co2-value|int|the absolute value of CO₂e emissions for the ingredient in [g] for the specified amount of ingredient||
|co2-value-improvement-percentage|float|Comparison of this recipes's co2 footprint per food unit to the average||
|co2-value-reduction-value|float|The amount of gramm CO₂ saved by serving this recipe instead of serving the amount of an average product that provides the same nutritional value (g)||

Just like for recipes, the URL parameter `indicators` must be set to `true` to receive the indicators for the ingredients.
Just like for recipes, the URL parameter `indicators` must be set to `true` to receive the indicators for the ingredients.
|:----------|:--------|:------------------|:----------|
|indicators|dictionary|the vita and nutritional indicators described in the respective section||

The parameters of the properties origin, transport, production, processing, conservation and packaging can be set to multiple values. They need to be provided  in a comma separated list.
`"production": "organic, fair-trade, Max Havelaar"`

The more properties are provided the more accurate are the values. More options will be added over time. Estimations are made for missing properties.

### Nutrient Values

Each request for a Ingredient may contains a list of Nutrients. Each Nutrient requires at least an `amount`.


| Property              | Type    | Unit    | Description                                       | Required |
|:----------------------|:--------|:--------|:----------                                        |:---------|
|energy-kcal            |float    | Kcal    | Der Brennwert (Energie) in Kilo-Kalorien pro 100g |no|
|energy-kjoule          |float    | KJoule  | Der Brennwert (Energie) in Kilo-Joule pro 100g    |no|
|fat-gram               |float    | Fett (g) | Der Gesamtfettgehalt in Gramm pro 100g            |no|
|saturated-fat-gram     |float    | gesättigte Fettsäure (g)  | Der Gehalt an gesättigten Fettsäuren in Gramm pro 100g    |no|
|carbohydrates-gram     |float    | Kohlehydrate (g)  | Der Gehalt an Kohlenhydraten in Gramm pro 100g    |no|
|sucrose-gram           |float    | Zucker (g)  | Der Gesamtzucker-Gehalt in Gramm pro 100g (alle Mono- und Disaccaride, ausgenommen mehrwertige Alkohole)    |no|
|protein-gram           |float    | Eiweiß (g)  | Der Eiweißgehalt in Gramm pro 100g    |no|
|sodium-chloride-gram   |float    | Salz (g)  |Der Salzgehalt in Gramm pro 100g (lt. LMIV Anhang I "Salz" = berechneter Gehalt an Salzäquivalent: Salz = Natrium x 2,5)    |no|
|monounsaturated-fat-milligram |float    | einfach ungesättigte Fettsäure (mg)  | Der Gehalt an einfach ungesättigten Fettsäuren in Milligramm pro 100g    |no|
|polyunsaturated-fat-milligram |float    | mehrfach ungesättigte Fettsäure (mg)  | Der Gehalt an mehrfach ungesättigten Fettsäuren in Milligramm pro 100g    |no|
|cholesterol-milligram  |float    | Cholesterin (mg)  | Der Cholesteringehalt in Milligramm pro 100g    |no|
|fibers-gram            |float    | Ballaststoffe (g)  | Der Ballaststoffgehalt in Gramm pro 100g   |no|
|water-gram             |float    | Wasser (g)  | Der Wassergehalt in Gramm pro 100g   |no|
|vitamine-a1-microgram       |float    | Vitamin A (μg)  | Der Vitamin A-Gehalt (Retinoläquivalent) in Mikrogramm pro 100g    |no|
|vitamine-b1-microgram       |float    | Vitamin B1 (μg)  | Der Vitamin B1-Gehalt (Thiamin) in Mikrogramm pro 100g    |no|
|vitamine-b2-microgram       |float    | Vitamin B2 (μg)  | Der Vitamin B2-Gehalt (Riboflavin) in Mikrogramm pro 100g    |no|
|vitamine-b6-microgram       |float    | Vitamin B6 (μg)  | Der Vitamin B6-Gehalt (Pyridoxin) in Mikrogramm pro 100g   |no|
|vitamine-b12-microgram      |float    | Vitamin B12 (μg)  | Der Vitamin B12-Gehalt (Cobalamin) in Mikrogramm pro 100g    |no|
|vitamine-c-milligram        |float    | Vitamin C (mg)  | Der Vitamin C-Gehalt (Ascorbinsäure) in Milligramm pro 100g    |no|
|vitamine-d-microgram        |float    | Vitamin D (μg)  | Der Vitamin D-Gehalt (Calciol) in Mikrogramm pro 100g    |no|
|vitamine-e-microgram        |float    | Vitamin E (μg)  | Der Vitamin E-Gehalt (Tocopherol) in Mikrogramm pro 100g    |no|
|vitamine-h-microgram        |float    | Vitamin H (μg)  | Der Vitamin H-Gehalt (Biotin) in Mikrogramm pro 100g    |no|
|vitamine-k-microgram        |float    | Vitamin K (μg)  | Der Vitamin K-Gehalt in Mikrogramm pro 100g    |no|
|beta-carotene-milligram  |float    | BetaCarotin (mg)  | Der Beta-Carotin-Gehalt in Milligramm pro 100g    |no|
|niacin-milligram       |float    | Niacin (mg)  | Der Vitamin B3-Gehalt (Niacinäquivalent) in Milligramm pro 100g    |no|
|pantohen-milligram     |float    | Pantothen-säure (mg)  | Der Pantothensäure-Gehalt (Vitamin B5) in Milligramm pro 100g    |no|
|folic-acid-microgram   |float    | Folsäure (μg)  | Der Folsäure-Gehalt in Mikrogramm pro 100g    |no|
|sodium-milligram       |float    | Natrium (mg)  | Der Natriumgehalt in Milligramm pro 100g    |no|
|potassium-milligram    |float    | Kalium (mg)  | Der Kaliumgehalt in Milligramm pro 100g    |no|
|chlorine-milligram     |float    | Chlor (mg)  | Der Chlorgehalt in Milligramm pro 100g    |no|
|calcium-milligram      |float    | Calcium (mg)  | Der Calciumgehalt in Milligramm pro 100g    |no|
|magnesium-milligram    |float    | Magnesium (mg)  | Der Magnesiumgehalt in Milligramm pro 100g    |no|
|phosphorus-milligram   |float    | Phosphor (mg)  | Der Phosphorgehalt in Milligramm pro 100g    |no|
|iron-milligram         |float    | Eisen (mg)  | Der Eisengehalt in Milligramm pro 100g    |no|
|zinc-microgram         |float    | Zink (μg)  | Der Zinkgehalt in Mikrogramm pro 100g    |no|
|copper-microgram       |float    | Kupfer (μg)  | Der Kupfergehalt in Mikrogramm pro 100g    |no|
|manganese-microgram    |float    | Mangan (μg)  | Der Mangangehalt in Mikrogramm pro 100g    |no|
|flouride-microgram     |float    | Fluoride (μg)  | Der Fluoridgehalt in Mikrogramm pro 100g    |no|
|iodine-microgram       |float    | Jod (μg)  | Der Jodgehalt in Mikrogramm pro 100g    |no|
|purine-milligram       |float    | Purine (mg)  | Der Puringehalt in Milligramm pro 100g    |no|
|uric-acid-milligram     |float    | Harnsäure (mg)  | Der Harnsäuregehalt in Milligramm pro 100g    |no|
|alcohol-volume-percent       |float    | Alkoholgehalt (% vol)  | Laut LMIV Art. 9 (1k) muss der Alkoholgehalt in Volumenprozent (% vol) angegeben werden, sobald er 1,2 %vol überschreitet.    |no|


# Group Supply Resources
Supplies are ordered from and delivered by a specific supplier in the supply chain. They can serve as the data pool for all the Eaternity Reports, as well as we can provide feedback on single purchases.

## Supply Properties
## Supply Properties
| Property | Type  | Description      | Required |
# Group Supply Resources


| Property | Type  | Description      | Required |
| Property | Type  | Description      | Required |
| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|----------|




+ Request (application/json)










        {
            "id": "9876543",
            "kitchen-id": "198764",
            "supplier-id": "S0003",
            "names": [
                {
                    "language": "de",
                {
                            "language": "de",
                        {
                {
                {
                {
                    "id": "3948756",
                            "language": "de",
                    "unit": "gram",
                    "unit": "gram",
                            "value": "Kürbis"
                        }
                    ],
                {
                {
                    "origin": "Spanien",
                            "language": "de",
                            "language": "de",
                        {
                            "language": "de",
                {
                    "unit": "gram",
                    "unit": "gram",
                        {
                    "unit": "gram",
                    "processing": "raw",
                    "processing": "raw",
                        }
                ]
                ]
                }

+ Response 200 (application/json)




        [
        {
            "request-id": 1,
            "request-id": 1,
        },
        },
        {
        {
            "statuscode": 200,
            "request-id": 1,


+ Response 200 (application/json)

        [
        {
            "statuscode": 200,
            "message": "",
            "request-id": 1,
            "supply-id": "d1ed2263"
        },
        {
            "statuscode": 500,
            "message": "Server Error. Just try again.",
            "request-id": 2
            "request-id": 2
        },
        {










        {
        {
        {
            "statuscode": 200,


+ Response 200 (application/json)

        [
        {
            "statuscode": 200,
            "message": "",
            "supply-id": "d1ed2263"
        },
        {
            "statuscode": 200,
            "message": "",
            "supply-id": "d1ed2267"
        }
        }
        {
            "statuscode": 200,






+ Parameters
+ Parameters







        {



        {
        {
        {
            "id": "9876543",
            "kitchen-id": "198764",
            "supplier-id": "S0003",
            "names": [
                {
                    "language": "de",
                    "value": "Lieferung 02.11.2013"
                }
            ],
            "date": "2013-11-02",
            "co2-value": 7650,
            "rating": "B",
            "info-text": "Origin of ingredient Kürbis (id: 3948756) was estimated to 'Spanien'",
            "ingredients": [
                {
                    "id": "3948756",
                    "co2-value": 3000,
                    "rating": "A",
                    "bar-chart": 39.22
        }
        }







        {
### Create or update supply [PUT]
            "names": [
            "names": [
                {
                    "language": "de",
                    "language": "de",
                }
            ],
            ],
            "ingredients": [
                {
                {
                    "names": [
                        {
                            "language": "de",
                            "language": "de",
                        }
                    ],
                    ],
                    "unit": "gram",
                    "unit": "gram",
                            "language": "de",
                        }
                },
                {
                {
                },
                {
                    "names": [
                        {
                            "language": "de",
                            "language": "de",
                        }
                    ],
                    ],
                    "unit": "gram",
                    "unit": "gram",
                            "language": "de",
                        }
                }
            ]
            ]
                }
            ]
        }
                    "production": "standard",
                    "processing": "raw",
                }
            ]
        }
        }



An example API call to create a prognosis:
An example API call to create a prognosis:









    + Body
    + Body

    + Body
            {
                "date-start": "2021-02-08",
                "date-end": "2021-02-09",
                "async": false
            }

+ Response 201 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/prognosis/{kitchen_id}/forecast/{prediction_id}
    
    + Attributes (Prognosis)
    
    + Body
            
            {
                "kitchen_id": "11122233",
                "prediction_id": "3f8e11ca-5234-47da-8602-c255a290e5f2",
                "status": "done",
                "info": [],
                "predicted_sales": {
                    "date-start": "2021-02-08",
                    "date-end": "2021-02-09",
                    "results": [{
                            "date": "2021-02-08",
                            "total-sales": {
                                "portions": 1203,
                                "low": 1123,
                                "high": 1265
                            },
                            "recipes": [{
                                    "recipe-id": 11111,
                                    "portions": 489,
                                    "low": 416,
                                    "high": 526
                                },
                                ...
                            ]
                        },
                        ...
                    ]
                }
            }



## Forecast Results [/prognosis/{kitchen_id}/forecast/{prediction_id}]

+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.
    + prediction_id (string, required) - the id of the prediction.

### Get a forecast [GET]
This request retrieves the status (and if done the resulting predicted sales numbers) of a previously created forecast calculation.

+ Response 201 (application/json)

    + Attributes (Prognosis)
    
    
            {
                "kitchen_id": "11122233",
                "prediction_id": "3f8e11ca-5234-47da-8602-c255a290e5f2",
                "status": "done",
                "info": [],
                "predicted_sales": {
                    "date-start": "2021-02-08",
                    "date-end": "2021-02-09",
                    "results": [{
                            "date": "2021-02-08",
                            "total-sales": {
                                "portions": 1203,
                                "low": 1123,
                                "high": 1265
                            },
                            "recipes": [{
                                    "recipe-id": 11111,
                                    "portions": 489,
                                    "low": 416,
                                    "high": 526
                                },
                                ...
                            ]
                        },
                        ...
                    ]
                }
            }





+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.



+ Parameters
+ Parameters
    + kitchen_id (string, required) - the id of the kitchen.
    + kitchen_id (string, required) - the id of the kitchen.
    + prediction_id (string, required) - the id of the prediction.

### Get a forecast [GET]
This request retrieves the status (and if done the resulting predicted sales numbers) of a previously created forecast calculation.

+ Response 201 (application/json)

    + Attributes (Prognosis)
    
    + Body

+ Response 204












### Create a prognosis [POST]

+ Request (application/json)


        [
        {
          "recipe-id": "1",
          "sold-portions": 10,
          "production-portions": 12
        },
        {


            
            
            {
                "recipes": [
                    {
                        "recipe-id": "11111",
                        "recipe-id": "11111",
                    },
                    {
                        "recipe-id": "22222",
                        "recipe-id": "22222",
                        "status": "NOT_FOUND"

            {
                "recipes": [
                    {
                        "recipe-id": "11111",
                        "status": "UPDATED"
                    },
                    {
                        "recipe-id": "22222",
                        "status": "NOT_FOUND"
                    }
                ]
                ]
                ]
            }
            }







        [
        {
            "statuscode": 201,





+ `recipe-id` (string) - the id of the recipe to update
+ `recipe-id` (string) - the id of the recipe to update
+ `sold-portions` (number) - the id of the recipe to update
+ `production-portions` (number) - the id of the recipe to update


# Group Advanced Information

### Localization
The API is designed such that one request may contain information about an object (e.g. a recipe or a supply) in multiple languages.
Every JSON field which is subject to localization has a language array as value. One language object looks like this:

`{
    "language": "de",
    "value": "Kürbisrisotto"
}`

Example of recipe title language array:

`"titles": [
{
    "language": "de",
    "value": "Kürbisrisotto"
},
{
    "language": "en",
    "value": "Pumpkin Risotto"
}]`

The language field must contain one of the [ISO 639-1](http://www.loc.gov/standards/iso639-2/php/code_list.php) alpha-2 codes as a descriptor for the language you use.


### Id Generation
The id's of recipes, kitchens and supplies can be generated in two different ways. The first possibility is to create a new resource through a `POST` to the API, then the id is generated by Eaternity.
The second possibility is to create a new resource through a `PUT`, providing your own id in the URL itself (e.g. /recipes/298734), then your id is used on our servers. This is the recommended approach, as it helps us coordinating your requests.
The id can be any alphanumeric value following this [regular expression](https://regexr.com/3mho5): [-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|] (the allowed characters for a HTTP URL).

### Notes On The Format
The API accepts JSON in requests. It returns JSON in all of its responses, including errors. Only the UTF-8 character encoding is supported for both requests and responses.

### SSL
All requests need to be encrypted through SSL. Please make sure to whitelist the latest SSL certificate from Eaternity.

You can find the latest certificates by accessing the specific domain.

We recommend to whitelist the cloudflare root certificate "cloudflare_origin_rsa.pem", as follows all our domains and any renewal will be secured (test.eaternity.ch and co2.eaternity.ch). Be advised that if you prefer whitelisting our individual domain names (e.g.: "cloudflare-eaternity.ch-2017.crt"), you will have to renew it each year in time, to not interrupt your service.

#### Use Server Name Indication (SNI)
Since Eaternity uses distributed Google servers, the IP-address of the service changes and are shared between different applications.

To make SSL work for the Eaternity Database API, the desired hostname (co2.eaternity.ch) needs to be specified with every request according to the SNI-Speficiation. An example request to our service including SNI, using the `-servername` argument is as follows:

`openssl s_client -connect co2.eaternity.ch:443 -servername eaternity.ch`

### Server Responses
A successful request will be prompted with either `200 - Success` or `204 - No Content`.

Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API returns an HTTP Status Code that indicates the nature of the failure (below), with a response body in JSON format containing additional information.

* 200   `Success` - If a resource was requested, it will be available at the top level of the response body.
* 201   `Created` -  The request was successful and a resource was created. The Location Header field indicates the URI the resource can be found.
* 204   `No Content` - The request was successful and the body intentionally contains no data.

* 400   `Bad request` - This occurs when the request was not sent according to the documentation. Can be either the JSON format or the content. Check the documentation and the syntax of your request and try again.
* 401   `No authorization` - A valid API key was not provided with the request, so the API could not associate a client with the request.
* 403   `Forbidden` - The Kitchen is not authorized to calculate environmental values of recipes. Only users that pay for the "Eaternity License" are allowed to do so. Please contact Eaternity to get an up-to-date pricing.
* 404   `Not found` - Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist.
* 405   `Method not allowed` - When the resource exists but the HTTP method verb is not allowed on this resource.

* 500   `Server error` - Just try again.

* 601   `Manual matching missing` - An ingredient was requested, whose id is not yet manually matched into the Eaternity Database. Retry once a day.
* 602   `No automatic match found` - At least one ingredient name could not get automatically matched into the Eaternity Database. Retry once a day or try with a different ingredient name.
* 610   `Missing required property` - A required resource property was not given in the request. Please provide the required field.
* 611   `Wrong property value` - A resource property was not provided according to the documentation. Either the given format is wrong or the value doesn't match to the given options. Usually not dependent on the implementation but on the user input.

## Indicators Results

If requested, a collection of indicators will be added to the return JSON for Recipes, Ingredients, and Supplies. The  indicators appear as follows:


+ Response 201 (application/json)

        {
            "co2-value": 765,
            "eaternity-award": false,
            "rating": "B",
            "bar-chart": 99,
            "bar-chart": 99,
        {
            "indicators": {
            "eaternity-award": false,
            "indicators": {
            "bar-chart": 99,
            "bar-chart": 99,
            "co2-value-improvement-percentage": 34.4,
            "indicators": {
            "indicators": {
                "vita-score": {
                    "vita-score-points": 346,
                    "vita-score-rating": "B",
                    "vita-score-improvement-percentage": -2.93,
                    "energy-kcals": 457,
                    "nutrition-label": true,
                    "nutrition-rating": "A",
                    "fruit-risk-factor-amount-gram": 0.00,
                    "fruit-risk-factor-points": 124.19,
                    "vegetable-risk-factor-amount-gram": 0.00,
                    "vegetable-risk-factor-points": 88.25,
                    "wholegrain-risk-factor-amount-gram": 0.00,
                    "wholegrain-risk-factor-points": 122.34,
                    "nuts-seeds-risk-factor-amount-gram": 0.00,
                    "nuts-seeds-risk-factor-points": 65.63,
                    "milk-risk-factor-amount-gram": 0.00,
                    "milk-risk-factor-points": 7.91,
                    "processed-meat-risk-factor-amount-gram": 0.00,
                    "processed-meat-risk-factor-points": 0.00,
                    "red-meat-risk-factor-amount-gram": 0.00,
                    "red-meat-risk-factor-points": 0.00,
                    "salt-risk-factor-amount-gram": 1.73,
                    "salt-risk-factor-points": 4.29
                },
                "environment": {
                    "animal-treatment-label": true,
                    "animal-treatment-rating": "A",
                    "rainforest-label": false,
                    "rainforest-rating": "E",
        }
        }




### Climate Score

The CO₂eq values are given in the following unit for the different resources.


| Property  | Type    | Description |
|:----------|:------------------|:----------|
|:----------|:------------------|:----------|
|rating|string|Rating [A,B,C,D,E]. A is best, E is worst.|
|eaternity-award|boolean|If the item receives the Climate Award.|
|eaternity-award|boolean|If the item receives the Climate Award.|
| Property  | Type    | Description |



### Vita Score

([Documentation of the Vita Score](http://www.eaternity.org/foodprint/vita-score))


| Property  | Type    | Description |
|:----------|:------------------|:----------|
|vita-score-points|int|The total score in points.|
|vita-score-rating|string|Rating of Vita Score: [A,B,C,D,E]. A is best, E is worst|
|vita-score-rating|string|Rating of Vita Score: [A,B,C,D,E]. A is best, E is worst|
|energy-kcals|int|the total nutritional energy for the item in kilocalories|
|nutrition-label|boolean|whether a menu is nutritionally balanced|
|nutrition-label|boolean|whether a menu is nutritionally balanced|
|vita-score-points|int|The total score in points.|
|vita-score-rating|string|Rating of Vita Score: [A,B,C,D,E]. A is best, E is worst|
|vita-score-rating|string|Rating of Vita Score: [A,B,C,D,E]. A is best, E is worst|
|energy-kcals|int|the total nutritional energy for the item in kilocalories|
|nutrition-label|boolean|whether a menu is nutritionally balanced|
|nutrition-label|boolean|whether a menu is nutritionally balanced|
|fruit-risk-factor-amount-gram|float| Amount of fruits in the recipe that count against the theoretical minimum risk exposure level (TMREL) |
|fruit-risk-factor-points|float| Translation of the amount into the disability-adjusted life years (DALY) lost per 100'000 people, as a point score |
|vegetable-risk-factor-amount-gram|float|Amount of fruits in the recipe that count against the theoretical minimum risk exposure level (TMREL) |
|vegetable-risk-factor-points|float|Translation of the amount into the disability-adjusted life years (DALY) lost per 100'000 people, as a point score |
|wholegrain-risk-factor-amount-gram|float|Amount of wholegrain in the recipe that count against the theoretical minimum risk exposure level (TMREL) |
|wholegrain-risk-factor-points|float|Translation of the amount into the disability-adjusted life years (DALY) lost per 100'000 people, as a point score |
|nuts-seeds-risk-factor-amount-gram|float|Amount of nuts and seeds in the recipe that count against the theoretical minimum risk exposure level (TMREL) |
|nuts-seeds-risk-factor-points|float|Translation of the amount into the disability-adjusted life years (DALY) lost per 100'000 people, as a point score |


### Environmental Footprints

([Documentation of the Environmental Footprints](http://www.eaternity.org/foodprint/environmental-footprints))

| Property  | Type    | Description |
|:----------|:------------------|:----------|
|animal-treatment-label|boolean|whether the item conforms with animal welfare standards ( has an "A" rating )|
|animal-treatment-rating|string|Animal-treatment rating: [A,B,C,D,E]. A is best, E is worst|
|rainforest-label|boolean|whether the item meets the standard of avoiding deforestation ( has an "A" rating )|
|rainforest-rating|string|Rainforest rating: [A,B,C,D,E]. A is best, E is worst|
|rainforest-rating|string|Rainforest rating: [A,B,C,D,E]. A is best, E is worst|
|:----------|:------------------|:----------|
|animal-treatment-label|boolean|whether the item conforms with animal welfare standards ( has an "A" rating )|
|scarce-water-liters|int|the total scarce water amount for the item in Liters|
|scarce-water-liters|int|the total scarce water amount for the item in Liters|
|water-footprint-rating|string|Water-use rating: [A,B,C,D,E]. A is best, E is worst|
|water-footprint-award|boolean|If the item receives the Water Footprint Award.|
